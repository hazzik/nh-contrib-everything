<?xml version="1.0" encoding="UTF-8"?>
<!-- Don't touch this comment. If you are using Oxygen XML Editor uncomment this following line -->
<!--DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5b1//EN" "../support/docbook-dtd/docbookx.dtd"-->
<chapter id="validator-checkconstraints">
    <title>Using the Validator framework</title>
    <para>NHibernate Validator is intended to be used to implement multi-layered data validation,
        where constraints are expressed in a single place and checked in various different layers of
        the application.</para>
    <para>This chapter will cover NHibernate Validator usage for different layers</para>
    <section id="validator-checkconstraints-db" revision="2">
        <title>Database schema-level validation</title>
        <para>Out of the box, NHibernate Validator will translate the constraints you have defined
            for your entities into mapping metadata. For example, if a property of your entity has
            the attribute <literal>[NotNull]</literal>, its columns will be declared as <literal>not
                null</literal> in the DDL schema generated by NHibernate.</para>
        <para>Using hbm2ddl, domain model constraints will be expressed into the database schema.</para>
        <para>If, for some reason, the feature needs to be disabled, set <literal
            >apply_to_ddl</literal> to <literal>false</literal>.</para>
    </section>
    <section id="validator-checkconstraints-orm">
        <title>ORM integration</title>
        <para>NHibernate Validator integrates with NHibernate in a native way, and knows how to
            treat every persistent entity.</para>
        <section id="validator-checkconstraints-orm-hibernateevent" revision="1">
            <title>NHibernate event-based validation</title>
            <para>NHibernate Validator has two built-in NHibernate event listeners. Whenever a
                    <literal>PreInsertEvent</literal> or <literal>PreUpdateEvent</literal> occurs,
                the listeners will verify all constraint of the entity instance and throw an
                exception if any of them is violated. Basically, objects will be checked before any
                insert and before any update triggered by NHibernate. This includes cascade changes!
                This is the most convenient and easiest way to activate the validation process. If a
                constraint is violated, the event will raise a runtime
                    <classname>InvalidStateException</classname> which contains an array of <literal
                    >InvalidValue</literal>s describing each failure.</para>
            <para>If, for some reason, you want to disable this integration, set <literal
                    >autoregister_listeners</literal> to <literal>false</literal></para>
            <para>
                <note>
                    <para>If the entities are not annotated with validation attributes, there is no
                        runtime performance cost.</para>
                </note>
            </para>
            <para>In case you wish to set manually the event listeners for NHibernate Core, use the
                following configuration in <literal>hibernate.cfg.xml</literal>:</para>
            <programlisting>&lt;hibernate-configuration&gt;
    ...
    &lt;event type="pre-update"&gt;
        &lt;listener class="NHibernate.Validator.Event.ValidatePreUpdateEventListener"/&gt;
    &lt;/event&gt;
    &lt;event type="pre-insert"&gt;
        &lt;listener class="NHibernate.Validator.Event.ValidatePreInsertEventListener"/&gt;
    &lt;/event&gt;
&lt;/hibernate-configuration&gt;</programlisting>
        </section>
    </section>
    <section>
        <title>Application-level validation</title>
        <para>In order to interact with NHibernate Validator in your application you must use the
            main class: <classname>ValidatorEngine</classname>. </para>
        <programlisting>ValidatorEngine validator = new ValidatorEngine();
bool isValid = validator.IsValid(customer);</programlisting>
        <para>This two lines are enough to validate an object with its validation rules which can be
            configured using Attributes or XML. The first line is the instantiation of the validator
            engine of NHibernate Validator. The second line is the validation of an object, and the
            result of the <methodname>IsValid(...)</methodname> method indicates if the object is
            valid or not. In order to get the invalid values of an object, you can
            do:<programlisting>ValidatorEngine validator = new ValidatorEngine();
InvalidValue[] validationMessages = validator.GetInvalidValues(customer);</programlisting></para>
        <para>Now instead of getting only if the object is valid or not, we get an array of
            InvalidValues. If this array length is greater than zero then there are validation
            errors and you can travers the InvalidValue array to get verbose information about the
            problems that cause the object to be invalid. </para>
    </section>
    <section>
        <title>Presentation layer validation</title>
        <para>[TODO]</para>
    </section>
    <section>
        <title>Validation informations</title>
        <para>NHibernate Validator provides an array of <classname>InvalidValue</classname>. Each
                <literal>InvalidValue</literal> has several methods describing the reasons that
            caused the entity to be invalid.</para>
        <para><methodname>BeanClass</methodname> retrieves the failing bean type</para>
        <para><methodname>Bean</methodname>retrieves the failing instance (if any ie not when using
                <methodname>GetPotentianInvalidValues()</methodname>)</para>
        <para><methodname>Value</methodname> retrieves the failing value</para>
        <para><methodname>Message</methodname> retrieves the proper internationalized error message</para>
        <para><methodname>RootBean</methodname> retrieves the root bean instance generating the
            issue (useful in conjunction with <literal>[Valid]</literal>), is null if
            GetPotentialInvalidValues(...) is used.</para>
        <para><literal>PropertyPath</literal> retrieves the dotted path of the failing property
            starting from the root bean</para>
    </section>
</chapter>
