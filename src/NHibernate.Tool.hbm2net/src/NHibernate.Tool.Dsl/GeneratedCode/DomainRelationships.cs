//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NHibernate.NHDesigner
{
	/// <summary>
	/// DomainRelationship NHibernateModelHasEntities
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("NHibernate.NHDesigner.NHibernateModelHasEntities.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NHibernate.NHDesigner.NHibernateModelHasEntities.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("142254a1-0da8-455c-a506-55d3948a4ff4")]
	public partial class NHibernateModelHasEntities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NHibernateModelHasEntities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x142254a1, 0x0da8, 0x455c, 0xa5, 0x06, 0x55, 0xd3, 0x94, 0x8a, 0x4f, 0xf4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NHibernateModelHasEntities link in the same Partition as the given NHibernateModel
		/// </summary>
		/// <param name="source">NHibernateModel to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public NHibernateModelHasEntities(NHibernateModel source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NHibernateModelHasEntities.NHibernateModelDomainRoleId, source), new DslModeling::RoleAssignment(NHibernateModelHasEntities.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NHibernateModelHasEntities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NHibernateModelHasEntities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NHibernateModelHasEntities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NHibernateModelHasEntities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region NHibernateModel domain role code
		
		/// <summary>
		/// NHibernateModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid NHibernateModelDomainRoleId = new global::System.Guid(0x43e99d14, 0x42b2, 0x44b1, 0xac, 0xfc, 0x93, 0xa3, 0x63, 0x56, 0xd7, 0x45);
		
		/// <summary>
		/// DomainRole NHibernateModel
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.NHibernateModelHasEntities/NHibernateModel.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.NHibernateModelHasEntities/NHibernateModel.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Entities", PropertyDisplayNameKey="NHibernate.NHDesigner.NHibernateModelHasEntities/NHibernateModel.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("43e99d14-42b2-44b1-acfc-93a36356d745")]
		public virtual NHibernateModel NHibernateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NHibernateModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, NHibernateModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NHibernateModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NHibernateModel of a Entity
		/// <summary>
		/// Gets NHibernateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static NHibernateModel GetNHibernateModel(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as NHibernateModel;
		}
		
		/// <summary>
		/// Sets NHibernateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetNHibernateModel(Entity element, NHibernateModel newNHibernateModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newNHibernateModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x4c33d372, 0x409c, 0x4cf1, 0x9b, 0x48, 0x46, 0x24, 0x1e, 0xea, 0x4b, 0x9a);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.NHibernateModelHasEntities/Element.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.NHibernateModelHasEntities/Element.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "NHibernateModel", PropertyDisplayNameKey="NHibernate.NHDesigner.NHibernateModelHasEntities/Element.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4c33d372-409c-4cf1-9b48-46241eea4b9a")]
		public virtual Entity Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entities of a NHibernateModel
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetEntities(NHibernateModel element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, NHibernateModelDomainRoleId);
		}
		#endregion
		#region NHibernateModel link accessor
		/// <summary>
		/// Get the list of NHibernateModelHasEntities links to a NHibernateModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.NHibernateModelHasEntities> GetLinksToEntities ( global::NHibernate.NHDesigner.NHibernateModel nHibernateModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.NHibernateModelHasEntities>(nHibernateModelInstance, global::NHibernate.NHDesigner.NHibernateModelHasEntities.NHibernateModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the NHibernateModelHasEntities link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.NHibernateModelHasEntities GetLinkToNHibernateModel (global::NHibernate.NHDesigner.Entity elementInstance)
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.NHibernateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.NHibernateModelHasEntities>(elementInstance, global::NHibernate.NHDesigner.NHibernateModelHasEntities.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region NHibernateModelHasEntities instance accessors
		
		/// <summary>
		/// Get any NHibernateModelHasEntities links between a given NHibernateModel and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.NHibernateModelHasEntities> GetLinks( global::NHibernate.NHDesigner.NHibernateModel source, global::NHibernate.NHDesigner.Entity target )
		{
			global::System.Collections.Generic.List<global::NHibernate.NHDesigner.NHibernateModelHasEntities> outLinks = new global::System.Collections.Generic.List<global::NHibernate.NHDesigner.NHibernateModelHasEntities>();
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.NHibernateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.NHibernateModelHasEntities>(source, global::NHibernate.NHDesigner.NHibernateModelHasEntities.NHibernateModelDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.NHibernateModelHasEntities link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NHibernateModelHasEntities link between a given NHibernateModeland a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.NHibernateModelHasEntities GetLink( global::NHibernate.NHDesigner.NHibernateModel source, global::NHibernate.NHDesigner.Entity target )
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.NHibernateModelHasEntities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.NHibernateModelHasEntities>(source, global::NHibernate.NHDesigner.NHibernateModelHasEntities.NHibernateModelDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.NHibernateModelHasEntities link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NHibernate.NHDesigner
{
	/// <summary>
	/// DomainRelationship EntityReferencesBase
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityReferencesBase.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityReferencesBase.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("1c21cd18-96bd-48eb-9864-b03e0f73bc5d")]
	public partial class EntityReferencesBase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityReferencesBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1c21cd18, 0x96bd, 0x48eb, 0x98, 0x64, 0xb0, 0x3e, 0x0f, 0x73, 0xbc, 0x5d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityReferencesBase link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public EntityReferencesBase(Entity source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityReferencesBase.SourceDomainRoleId, source), new DslModeling::RoleAssignment(EntityReferencesBase.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesBase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesBase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesBase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x17253bdc, 0xea79, 0x4183, 0xb0, 0x76, 0x8d, 0x41, 0x30, 0x29, 0x68, 0x44);
		
		/// <summary>
		/// DomainRole Source
		/// Description for NHibernate.NHDesigner.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityReferencesBase/Source.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityReferencesBase/Source.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclass", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityReferencesBase/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("17253bdc-ea79-4183-b076-8d4130296844")]
		public virtual Entity Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Baseclass of a Entity
		/// <summary>
		/// Gets a list of Baseclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetBaseclass(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x0f562032, 0x7c8c, 0x478f, 0xba, 0x03, 0xcd, 0x6a, 0xe7, 0xa1, 0x1a, 0x40);
		
		/// <summary>
		/// DomainRole Target
		/// Description for NHibernate.NHDesigner.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityReferencesBase/Target.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityReferencesBase/Target.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Baseclass", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityReferencesBase/Target.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0f562032-7c8c-478f-ba03-cd6ae7a11a40")]
		public virtual Entity Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclass of a Entity
		/// <summary>
		/// Gets Subclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetSubclass(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Subclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubclass(Entity element, Entity newTarget)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceDomainRoleId, newTarget);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the EntityReferencesBase link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityReferencesBase GetLinkToSubclass (global::NHibernate.NHDesigner.Entity sourceInstance)
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityReferencesBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityReferencesBase>(sourceInstance, global::NHibernate.NHDesigner.EntityReferencesBase.SourceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Source not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of EntityReferencesBase links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityReferencesBase> GetLinksToBaseclass ( global::NHibernate.NHDesigner.Entity targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityReferencesBase>(targetInstance, global::NHibernate.NHDesigner.EntityReferencesBase.TargetDomainRoleId);
		}
		#endregion
		#region EntityReferencesBase instance accessors
		
		/// <summary>
		/// Get any EntityReferencesBase links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityReferencesBase> GetLinks( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Entity target )
		{
			global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityReferencesBase> outLinks = new global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityReferencesBase>();
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityReferencesBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityReferencesBase>(source, global::NHibernate.NHDesigner.EntityReferencesBase.SourceDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityReferencesBase link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityReferencesBase link between a given Entityand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityReferencesBase GetLink( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Entity target )
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityReferencesBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityReferencesBase>(source, global::NHibernate.NHDesigner.EntityReferencesBase.SourceDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityReferencesBase link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NHibernate.NHDesigner
{
	/// <summary>
	/// DomainRelationship EntityHasProperties
	/// Description for NHibernate.NHDesigner.EntityHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasProperties.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasProperties.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1ccdc53f-3265-4e09-a95e-53b7db612686")]
	public partial class EntityHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1ccdc53f, 0x3265, 0x4e09, 0xa9, 0x5e, 0x53, 0xb7, 0xdb, 0x61, 0x26, 0x86);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasProperties link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public EntityHasProperties(Entity source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasProperties.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x562ba08d, 0x8213, 0x4d30, 0xb0, 0xa0, 0x31, 0x8b, 0x9b, 0xb6, 0xca, 0x17);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for NHibernate.NHDesigner.EntityHasProperties.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasProperties/Entity.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasProperties/Entity.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityHasProperties/Entity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("562ba08d-8213-4d30-b0a0-318b9bb6ca17")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Property
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Property element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newEntity);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x7313b038, 0x718b, 0x40b5, 0xbb, 0x02, 0x16, 0xf7, 0x04, 0x02, 0xaf, 0xf6);
		
		/// <summary>
		/// DomainRole Property
		/// Description for NHibernate.NHDesigner.EntityHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasProperties/Property.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasProperties/Property.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityHasProperties/Property.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7313b038-718b-40b5-bb02-16f70402aff6")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a Entity
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Property>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasProperties links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityHasProperties> GetLinksToProperties ( global::NHibernate.NHDesigner.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasProperties>(entityInstance, global::NHibernate.NHDesigner.EntityHasProperties.EntityDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the EntityHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityHasProperties GetLinkToEntity (global::NHibernate.NHDesigner.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasProperties>(propertyInstance, global::NHibernate.NHDesigner.EntityHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasProperties instance accessors
		
		/// <summary>
		/// Get any EntityHasProperties links between a given Entity and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityHasProperties> GetLinks( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Property target )
		{
			global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityHasProperties> outLinks = new global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityHasProperties>();
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasProperties>(source, global::NHibernate.NHDesigner.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasProperties link between a given Entityand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityHasProperties GetLink( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Property target )
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasProperties>(source, global::NHibernate.NHDesigner.EntityHasProperties.EntityDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NHibernate.NHDesigner
{
	/// <summary>
	/// DomainRelationship EntityReferencesBaseWithJoin
	/// Description for NHibernate.NHDesigner.EntityReferencesBaseWithJoin
	/// </summary>
	[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityReferencesBaseWithJoin.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityReferencesBaseWithJoin.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2dfeebfb-e935-45bf-a165-d676771d4c87")]
	public partial class EntityReferencesBaseWithJoin : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityReferencesBaseWithJoin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2dfeebfb, 0xe935, 0x45bf, 0xa1, 0x65, 0xd6, 0x76, 0x77, 0x1d, 0x4c, 0x87);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityReferencesBaseWithJoin link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Entity to use as the target of the relationship.</param>
		public EntityReferencesBaseWithJoin(Entity source, Entity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityReferencesBaseWithJoin.SourceEntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityReferencesBaseWithJoin.TargetEntityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesBaseWithJoin(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesBaseWithJoin(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityReferencesBaseWithJoin(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityReferencesBaseWithJoin(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceEntity domain role code
		
		/// <summary>
		/// SourceEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceEntityDomainRoleId = new global::System.Guid(0x01fa9e6d, 0xe9e8, 0x41c9, 0x9c, 0x4a, 0x54, 0x10, 0xbe, 0x0a, 0x9f, 0xb0);
		
		/// <summary>
		/// DomainRole SourceEntity
		/// Description for NHibernate.NHDesigner.EntityReferencesBaseWithJoin.SourceEntity
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityReferencesBaseWithJoin/SourceEntity.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityReferencesBaseWithJoin/SourceEntity.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "JoinedSubclass", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityReferencesBaseWithJoin/SourceEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("01fa9e6d-e9e8-41c9-9c4a-5410be0a9fb0")]
		public virtual Entity SourceEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BaseclassWJoin of a Entity
		/// <summary>
		/// Gets a list of BaseclassWJoin.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Entity> GetBaseclassWJoin(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Entity>(element, TargetEntityDomainRoleId);
		}
		#endregion
		#region TargetEntity domain role code
		
		/// <summary>
		/// TargetEntity domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetEntityDomainRoleId = new global::System.Guid(0xeb2df7d6, 0x7835, 0x4cd8, 0x8c, 0x27, 0xb4, 0xf2, 0xe7, 0x86, 0x5a, 0x1a);
		
		/// <summary>
		/// DomainRole TargetEntity
		/// Description for NHibernate.NHDesigner.EntityReferencesBaseWithJoin.TargetEntity
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityReferencesBaseWithJoin/TargetEntity.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityReferencesBaseWithJoin/TargetEntity.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BaseclassWJoin", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityReferencesBaseWithJoin/TargetEntity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("eb2df7d6-7835-4cd8-8c27-b4f2e7865a1a")]
		public virtual Entity TargetEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetEntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetEntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access JoinedSubclass of a Entity
		/// <summary>
		/// Gets JoinedSubclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetJoinedSubclass(Entity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceEntityDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets JoinedSubclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetJoinedSubclass(Entity element, Entity newTargetEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceEntityDomainRoleId, newTargetEntity);
		}
		#endregion
		#region SourceEntity link accessor
		/// <summary>
		/// Get the EntityReferencesBaseWithJoin link to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin GetLinkToJoinedSubclass (global::NHibernate.NHDesigner.Entity sourceEntityInstance)
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin>(sourceEntityInstance, global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin.SourceEntityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceEntity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetEntity link accessor
		/// <summary>
		/// Get the list of EntityReferencesBaseWithJoin links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin> GetLinksToBaseclassWJoin ( global::NHibernate.NHDesigner.Entity targetEntityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin>(targetEntityInstance, global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin.TargetEntityDomainRoleId);
		}
		#endregion
		#region EntityReferencesBaseWithJoin instance accessors
		
		/// <summary>
		/// Get any EntityReferencesBaseWithJoin links between a given Entity and a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin> GetLinks( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Entity target )
		{
			global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin> outLinks = new global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin>();
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin>(source, global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin.SourceEntityDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin link in links )
			{
				if ( target.Equals(link.TargetEntity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityReferencesBaseWithJoin link between a given Entityand a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin GetLink( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Entity target )
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin>(source, global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin.SourceEntityDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityReferencesBaseWithJoin link in links )
			{
				if ( target.Equals(link.TargetEntity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NHibernate.NHDesigner
{
	/// <summary>
	/// DomainRelationship EntityHasMeta
	/// Description for NHibernate.NHDesigner.EntityHasMeta
	/// </summary>
	[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasMeta.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasMeta.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2cfb427c-4fe2-42c1-b51f-d8893497702b")]
	public partial class EntityHasMeta : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasMeta domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2cfb427c, 0x4fe2, 0x42c1, 0xb5, 0x1f, 0xd8, 0x89, 0x34, 0x97, 0x70, 0x2b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasMeta link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Meta to use as the target of the relationship.</param>
		public EntityHasMeta(Entity source, Meta target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasMeta.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasMeta.MetaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasMeta(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasMeta(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasMeta(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasMeta(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0xfda4138f, 0xd30e, 0x4d69, 0x9f, 0xc4, 0x4b, 0x1b, 0x2f, 0x1e, 0x5b, 0x83);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for NHibernate.NHDesigner.EntityHasMeta.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasMeta/Entity.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasMeta/Entity.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Meta", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityHasMeta/Entity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fda4138f-d30e-4d69-9fc4-4b1b2f1e5b83")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Meta
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Meta element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MetaDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Meta element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MetaDomainRoleId, newEntity);
		}
		#endregion
		#region Meta domain role code
		
		/// <summary>
		/// Meta domain role Id.
		/// </summary>
		public static readonly global::System.Guid MetaDomainRoleId = new global::System.Guid(0xfe451048, 0x0379, 0x43d6, 0xa4, 0xad, 0x6d, 0xc6, 0xb5, 0x02, 0xf8, 0xc4);
		
		/// <summary>
		/// DomainRole Meta
		/// Description for NHibernate.NHDesigner.EntityHasMeta.Meta
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasMeta/Meta.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasMeta/Meta.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityHasMeta/Meta.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fe451048-0379-43d6-a4ad-6dc6b502f8c4")]
		public virtual Meta Meta
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Meta)DslModeling::DomainRoleInfo.GetRolePlayer(this, MetaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MetaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Meta of a Entity
		/// <summary>
		/// Gets a list of Meta.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Meta> GetMeta(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Meta>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasMeta links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityHasMeta> GetLinksToMeta ( global::NHibernate.NHDesigner.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasMeta>(entityInstance, global::NHibernate.NHDesigner.EntityHasMeta.EntityDomainRoleId);
		}
		#endregion
		#region Meta link accessor
		/// <summary>
		/// Get the EntityHasMeta link to a Meta.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityHasMeta GetLinkToEntity (global::NHibernate.NHDesigner.Meta metaInstance)
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasMeta> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasMeta>(metaInstance, global::NHibernate.NHDesigner.EntityHasMeta.MetaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Meta not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasMeta instance accessors
		
		/// <summary>
		/// Get any EntityHasMeta links between a given Entity and a Meta.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityHasMeta> GetLinks( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Meta target )
		{
			global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityHasMeta> outLinks = new global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityHasMeta>();
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasMeta> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasMeta>(source, global::NHibernate.NHDesigner.EntityHasMeta.EntityDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityHasMeta link in links )
			{
				if ( target.Equals(link.Meta) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasMeta link between a given Entityand a Meta.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityHasMeta GetLink( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Meta target )
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasMeta> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasMeta>(source, global::NHibernate.NHDesigner.EntityHasMeta.EntityDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityHasMeta link in links )
			{
				if ( target.Equals(link.Meta) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NHibernate.NHDesigner
{
	/// <summary>
	/// DomainRelationship EntityHasIdentifier
	/// Description for NHibernate.NHDesigner.EntityHasIdentifier
	/// </summary>
	[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasIdentifier.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasIdentifier.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3f87704d-b926-4c0f-90f8-be7a330fc221")]
	public partial class EntityHasIdentifier : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityHasIdentifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3f87704d, 0xb926, 0x4c0f, 0x90, 0xf8, 0xbe, 0x7a, 0x33, 0x0f, 0xc2, 0x21);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityHasIdentifier link in the same Partition as the given Entity
		/// </summary>
		/// <param name="source">Entity to use as the source of the relationship.</param>
		/// <param name="target">Identifier to use as the target of the relationship.</param>
		public EntityHasIdentifier(Entity source, Identifier target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityHasIdentifier.EntityDomainRoleId, source), new DslModeling::RoleAssignment(EntityHasIdentifier.IdentifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasIdentifier(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasIdentifier(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityHasIdentifier(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityHasIdentifier(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Entity domain role code
		
		/// <summary>
		/// Entity domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityDomainRoleId = new global::System.Guid(0x5d8a2842, 0x8555, 0x42f7, 0xaa, 0xaf, 0x3c, 0xfd, 0x0b, 0x97, 0xa4, 0xd1);
		
		/// <summary>
		/// DomainRole Entity
		/// Description for NHibernate.NHDesigner.EntityHasIdentifier.Entity
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasIdentifier/Entity.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasIdentifier/Entity.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Identifiers", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityHasIdentifier/Entity.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("5d8a2842-8555-42f7-aaaf-3cfd0b97a4d1")]
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Entity)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Entity of a Identifier
		/// <summary>
		/// Gets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Entity GetEntity(Identifier element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IdentifierDomainRoleId) as Entity;
		}
		
		/// <summary>
		/// Sets Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEntity(Identifier element, Entity newEntity)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IdentifierDomainRoleId, newEntity);
		}
		#endregion
		#region Identifier domain role code
		
		/// <summary>
		/// Identifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid IdentifierDomainRoleId = new global::System.Guid(0x97fcb37b, 0x4bfd, 0x4b34, 0xac, 0x8e, 0x1f, 0xe7, 0x22, 0x84, 0xfe, 0xc0);
		
		/// <summary>
		/// DomainRole Identifier
		/// Description for NHibernate.NHDesigner.EntityHasIdentifier.Identifier
		/// </summary>
		[DslDesign::DisplayNameResource("NHibernate.NHDesigner.EntityHasIdentifier/Identifier.DisplayName", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("NHibernate.NHDesigner.EntityHasIdentifier/Identifier.Description", typeof(global::NHibernate.NHDesigner.NHDesignerDomainModel), "NHibernate.NHDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Entity", PropertyDisplayNameKey="NHibernate.NHDesigner.EntityHasIdentifier/Identifier.PropertyDisplayName", PropagatesDelete = true, PropagatesCopy = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("97fcb37b-4bfd-4b34-ac8e-1fe72284fec0")]
		public virtual Identifier Identifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Identifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, IdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Identifiers of a Entity
		/// <summary>
		/// Gets a list of Identifiers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Identifier> GetIdentifiers(Entity element)
		{
			return new DslModeling::LinkedElementCollection<Identifier>(element, EntityDomainRoleId);
		}
		#endregion
		#region Entity link accessor
		/// <summary>
		/// Get the list of EntityHasIdentifier links to a Entity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityHasIdentifier> GetLinksToIdentifiers ( global::NHibernate.NHDesigner.Entity entityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasIdentifier>(entityInstance, global::NHibernate.NHDesigner.EntityHasIdentifier.EntityDomainRoleId);
		}
		#endregion
		#region Identifier link accessor
		/// <summary>
		/// Get the EntityHasIdentifier link to a Identifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityHasIdentifier GetLinkToEntity (global::NHibernate.NHDesigner.Identifier identifierInstance)
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasIdentifier>(identifierInstance, global::NHibernate.NHDesigner.EntityHasIdentifier.IdentifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Identifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityHasIdentifier instance accessors
		
		/// <summary>
		/// Get any EntityHasIdentifier links between a given Entity and a Identifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NHibernate.NHDesigner.EntityHasIdentifier> GetLinks( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Identifier target )
		{
			global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityHasIdentifier> outLinks = new global::System.Collections.Generic.List<global::NHibernate.NHDesigner.EntityHasIdentifier>();
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasIdentifier>(source, global::NHibernate.NHDesigner.EntityHasIdentifier.EntityDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityHasIdentifier link in links )
			{
				if ( target.Equals(link.Identifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityHasIdentifier link between a given Entityand a Identifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NHibernate.NHDesigner.EntityHasIdentifier GetLink( global::NHibernate.NHDesigner.Entity source, global::NHibernate.NHDesigner.Identifier target )
		{
			global::System.Collections.Generic.IList<global::NHibernate.NHDesigner.EntityHasIdentifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NHibernate.NHDesigner.EntityHasIdentifier>(source, global::NHibernate.NHDesigner.EntityHasIdentifier.EntityDomainRoleId);
			foreach ( global::NHibernate.NHDesigner.EntityHasIdentifier link in links )
			{
				if ( target.Equals(link.Identifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
