<#@ template language="C#v3.5" #>
<#@ include file="res://NHibernate.Tool.hbm2net.T4.templates.common.tt" #>
<#@ property name="clazz" type="ClassMapping" processor="PropertyProcessor" #>
<#@ property name="class2classmap" type="IDictionary" processor="PropertyProcessor" #>
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

<# foreach(var import in clazz.Using.OrderBy(i=>i.StartsWith("System")?"0"+i:i)) {#>
using <#=import#>;
<#}#>

<#= languageTool.GetPackageDeclaration(clazz) #>
{
	/// <summary>
<#=GetCommentForClass(clazz,1).TrimEnd()#>
	/// </summary>
	<#=clazz.Scope#> <#=clazz.Modifiers#> partial <#=clazz.DeclarationType#> <#=clazz.GeneratedName#> <#=GetInheritance(clazz)#>
	{
	
		/*----------------*/
		/*   constructor  */
		/*----------------*/
#region CTOR
		public <#=clazz.GeneratedName#>()
		{
<#foreach( FieldProperty field in clazz.Fields)
{#>
<#if(IsCollection(field))
{#>
			<#=GetPrivateFieldName(field)#> = new <#=GetGenericCollectionImplementation(field)#>();
<#}#><#}#>
		}
#endregion

		/*----------------*/
		/* private fields */
		/*----------------*/
#region Private fields declarations		
<#foreach( FieldProperty field in clazz.Fields)
{#>
<#=ToNetDoc(field.GetMetaAsString("field-description"),2)#>
		<#=GetType(field)#> <#=GetPrivateFieldName(field)#>;	<#=GetCommentForColumn(field)#><#}#>

#endregion
		/*----------------*/
		/*    properties  */
		/*----------------*/
#region getter/setters		
<#foreach( FieldProperty field in clazz.Fields)
{
#>
		/// <summary>
<#=ToNetDoc(field.GetMetaAsString("field-description"),2).Trim('\n','\r')#>		
		/// </summary>
		<#=field.PropertyGetScope#> virtual <#=GetType(field)#> <#=field.AccessorName#>
		{
			get{ return <#=GetPrivateFieldName(field)#>; }
<#if( HasSetter(field) ){#>
			set{ <#=GetPrivateFieldName(field)#> = value; }
<#}
#>
		}
<#}#>
#endregion
<#if( clazz.MustImplementEquals() ){#>
		public override bool Equals(object other)
		{
			if (this == other)
				return true;
			<#=clazz.Name#> rhs = other as <#=clazz.Name#>;
			if (rhs == null) 
				return false; // null or not a <#=clazz.Name#>
			return <#=string.Join(" && ",GetEqualityList(clazz,"rhs"))#>;
		}
		
		public override int GetHashCode()
		{
			return <#=string.Join(" ^ ",GetHashFieldList(clazz).Select(f=>f+".GetHashCode()").ToArray())#>;
		}
<#}#>
	}
}