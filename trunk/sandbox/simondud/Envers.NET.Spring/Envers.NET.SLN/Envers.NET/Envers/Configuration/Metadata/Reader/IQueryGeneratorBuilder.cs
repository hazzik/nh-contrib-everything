using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Envers.Entities.Mapper.Relation;
using NHibernate.Envers.Entities.Mapper.Relation.Query;

namespace NHibernate.Envers.Configuration.Metadata.Reader
{
    /**
     * Builds query generators, for reading collection middle tables, along with any related entities.
     * The related entities information can be added gradually, and when complete, the query generator can be built.
     * @author Simon Duduica, port of Envers omonyme class by Adam Warski (adam at warski dot org)
     */
    public sealed class QueryGeneratorBuilder {
        private readonly GlobalConfiguration _globalCfg;
        private readonly AuditEntitiesConfiguration _verEntCfg;
        private readonly MiddleIdData _referencingIdData;
        private readonly String _auditMiddleEntityName;
        private readonly IList<MiddleIdData> _idDatas;

        public QueryGeneratorBuilder(GlobalConfiguration globalCfg, AuditEntitiesConfiguration verEntCfg,
                              MiddleIdData referencingIdData, String auditMiddleEntityName) {
            this._globalCfg = globalCfg;
            this._verEntCfg = verEntCfg;
            this._referencingIdData = referencingIdData;
            this._auditMiddleEntityName = auditMiddleEntityName;

            _idDatas = new List<MiddleIdData>();
        }

        public void AddRelation(MiddleIdData idData) {
            _idDatas.Add(idData);
        }

        public IRelationQueryGenerator Build(ICollection<MiddleComponentData> componentDatas) {
            if (_idDatas.Count == 0) {
                return new OneEntityQueryGenerator(_verEntCfg, _auditMiddleEntityName, _referencingIdData,
                        componentDatas);
            } else if (_idDatas.Count == 1) {
                if (_idDatas[0].IsAudited()) {
                    return new TwoEntityQueryGenerator(_globalCfg, _verEntCfg, _auditMiddleEntityName, _referencingIdData,
                            _idDatas[0], componentDatas);
                } else {
                    return new TwoEntityOneAuditedQueryGenerator(_verEntCfg, _auditMiddleEntityName, _referencingIdData,
                            _idDatas[0], componentDatas);
                }
            } else if (_idDatas.Count == 2) {
                // All entities must be audited.
                if (!_idDatas[0].IsAudited() || !_idDatas[1].IsAudited()) {
                    throw new MappingException("Ternary relations using @Audited(targetAuditMode = NOT_AUDITED) are not supported.");
                }

                return new ThreeEntityQueryGenerator(_globalCfg, _verEntCfg, _auditMiddleEntityName, _referencingIdData,
                        _idDatas[0], _idDatas[1], componentDatas);
            } else {
                throw new NotSupportedException("Illegal number of related entities.");
            }
        }

        /**
         * @return Current index of data in the array, which will be the element of a list, returned when executing a query
         * generated by the built query generator.
         */
        public int CurrentIndex { get { return _idDatas.Count; } }
    }
}
