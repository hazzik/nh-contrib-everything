<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5b1//EN"
               "support/docbook-dtd/docbookx.dtd" [
<!ENTITY defineconstraints                SYSTEM "modules/checkconstraints.xml">
<!ENTITY checkconstraints             SYSTEM "modules/defineconstraints.xml">
]>
<book lang="en">
 <bookinfo><title>Hibernate Validator</title><subtitle>NHibernate Validator Reference
  Documentation</subtitle>
  <releaseinfo>1.0.0</releaseinfo>
 </bookinfo>
 <toc/>
 <toc/>
 <preface id="preface" revision="2">
  <title>Preface</title>
  <para>Attributes are a very convenient and elegant way to specify invariant constraints for a
   domain model. You can, for example, express that a property should never be null, that the
   account balance should be strictly positive, etc. These domain model constraints are declared in
   the bean itself by annotating its properties. A validator can then read them and check for
   constraint violations. The validation mechanism can be executed in different layers in your
   application without having to duplicate any of these rules (presentation layer, data access
   layer). Following the DRY principle, NHibernate Validator has been designed for that purpose.
   NHibernate Validator also let's declare the same rules in XML files. The both approach:
   Attributes and XML, let us interestings possibilities at time to configure our domain rules.</para>
  <para>NHibernate Validator works at two levels. First, it is able to check in-memory instances of
   a class for constraint violations. Second, it can apply the constraints to the NHibernate
   metamodel and incorporate them into the generated database schema.</para>
  <para>Each constraint attribute is associated to a validator implementation responsible for
   checking the constraint on the entity instance. A validator can also (optionally) apply the
   constraint to the NHibernate metamodel, allowing NHibernate to generate DDL that expresses the
   constraint. With the appropriate event listener, you can execute the checking operation on
   inserts and updates done by NHibernate. NHibernate Validator is not limited to use with
   NHibernate. You can easily use it anywhere in your application as well, indeed, you can use it at
   UI validation with Winforms or Asp.Net technologies.</para>
  <para>When checking instances at runtime, NHibernate Validator returns information about
   constraint violations in an array of <classname>InvalidValue</classname> s. Among other
   information, the <classname>InvalidValue</classname> contains an error description message that
   can embed the parameter values bundle with the annotation (eg. length limit), and message strings
   that may be externalized to a <classname>ResourceManager</classname> .</para>
 </preface>&defineconstraints;&checkconstraints;
</book>
